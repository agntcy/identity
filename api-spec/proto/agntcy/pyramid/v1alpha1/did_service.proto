syntax = "proto3";

package agntcy.pyramid.v1alpha1;

import "agntcy/pyramid/shared/v1alpha1/pagination.proto";
import "agntcy/pyramid/v1alpha1/did.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/agntcy/pyramid/internal/pkg/generated/agntcy/pyramid/v1alpha1;pyramid_sdk_go";

// DidService is the service that provides DID operations.
service DidService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "DidService";
  };

  // Generate a Did
  rpc GenerateDid(GenerateDidRequest) returns (Did) {
    option (google.api.http) = {
            post: "/v1alpha1/dids"
            body: "did"
        };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GenerateDid";
      summary: "Generate Did";
    };
  }

  // Resolve a Did
  rpc ResolveDid(ResolveDidRequest) returns (DidDocument) {
    option (google.api.http) = {
            get: "/v1alpha1/dids/{did_id}"
        };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ResolveDid";
      summary: "Resolve Did";
    };
  }

  // List Dids.
  rpc ListDids(ListDidsRequest) returns (ListDidsResponse) {
    option (google.api.http) = {
            get: "/v1alpha1/dids"
        };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ListDids";
      summary: "List Dids";
    };
  }

  // Publish a Did
  rpc PublishDid(PublishDidRequest) returns (DidDocument) {
    option (google.api.http) = {
            post: "/v1alpha1/dids/publish"
            body: "did"
        };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "PublishDid";
      summary: "Publish Did";
    };
  }
}

message ListDidsResponse {
  // A list of Dids.
  repeated Did dids = 1;

  // Pagination response.
  optional agntcy.pyramid.shared.v1alpha1.PagedResponse pagination = 2;
}

message ListDidsRequest {
  // The current page of the pagination
  optional int32 page = 1;

  // The page size of the pagination
  optional int32 size = 2;

  // The search query
  optional string query = 3;
}

message ResolveDidRequest {
  // Did Id to get.
  string did_id = 1;
}

message GenerateDidRequest {
  // The Did to generate.
  Did did = 1;
}

message PublishDidRequest {
  // The Did to publish.
  Did did = 1;
}


