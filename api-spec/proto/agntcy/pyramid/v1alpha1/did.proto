// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto3";

package agntcy.pyramid.v1alpha1;

// Package-wide variables from generator "generated".
option go_package = "github.com/agntcy/pyramid/internal/pkg/generated/agntcy/pyramid/v1alpha1;pyramid_sdk_go";

// DidDocument represents a set of data describing the DID subject including mechanisms such as:
//   - cryptographic public keys - used to authenticate itself and prove
//     association with the DID
//   - services - means of communicating or interacting with the DID subject or
//     associated entities via one or more service endpoints.
//     Examples include discovery services, agent services,
//     social networking services, file storage services,
//     and verifiable credential repository services.
//
// A DID Document can be retrieved by resolving a DID URI.
message DidDocument {
  // The DID {ID}
  // A did could be represented as `did:agntcy:{ID}`
  // The metadata below is related as claims to the {ID}
  optional string id = 1;

  // The node that was used to publish the document
  optional string node = 2;

  // Controller defines an entity that is authorized to make changes to a DID document.
  // The process of authorizing a DID controller is defined by the DID method.
  // It can be a string or a list of strings.
  repeated string controller = 3;

  // VerificationMethod is a list of cryptographic public keys, which can be used to authenticate or authorize
  // interactions with the DID subject or associated parties.
  repeated VerificationMethod verification_method = 4;

  // Service expresses ways of communicating with the DID subject or associated entities.
  // A service can be any type of service the DID subject wants to advertise.
  // spec reference: https://www.w3.org/TR/did-core/#verification-methods
  repeated Service service = 5;

  // AssertionMethod is used to specify how the DID subject is expected to express claims,
  // such as for the purposes of issuing a Verifiable Credential.
  repeated string assertion_method = 6;
}

// JWK represents:
// - a JSON Web Key (JWK) with the respective fields specific to RSA algorithms.
// - a Quantum JSON Web Key (QJWK) with the respective fields specific to NTRU algorithms.
message Jwk {
  // ALG represents the algorithm intended for use with the key.
  // Some example algorithms are "Falcon" family: "Falcon-512", "Falcon-1024" for Quantum algorithms.
  // Some example algorithms are "RS256", "RS384", "RS512" for RSA algorithms.
  optional string alg = 1;

  // KTY represents the key type parameter.
  // It specifies the family of quantum algorithms used with the key,
  // such as "NTRU" or "RSA" for non quantum algorithms.
  optional string kty = 2;

  // Use represents the intended use of the key.
  // Some example values are "enc" and "sig".
  optional string use = 3;

  // KID represents the key ID.
  // It is used to match a specific key.
  optional string kid = 4;

  // The exponent for the RSA public key.
  optional string e = 5;

  // The modulus for the RSA public key.
  optional string n = 6;

  // The private exponent for the RSA private key.
  optional string d = 7;

  // The first prime factor for the RSA private key.
  optional string p = 8;

  // The second prime factor for the RSA private key.
  optional string q = 9;

  // The first factor CRT exponent for the RSA private key.
  optional string dp = 10;

  // The second factor CRT exponent for the RSA private key.
  optional string dq = 11;

  // The first CRT coefficient for the RSA private key.
  optional string qi = 12;

  // The public key for the NTRU public key.
  optional string h = 13;

  // The polynomial for the NTRU private key.
  optional string f = 14;

  // The f inverse modulo p for the NTRU private key.
  optional string fp = 15;

  // The polynomial for the NTRU private key.
  optional string g = 16;
}

// JWKS represents a set of JSON Web Keys (JWKs).
message Jwks {
  // Keys represents the list of JSON Web Keys.
  repeated Jwk keys = 1;
}

// Service is used in DID documents to express ways of communicating with
// the DID subject or associated entities.
// A service can be any type of service the DID subject wants to advertise.
//
// Specification Reference: https://www.w3.org/TR/did-core/#services
message Service {
  // Id is the value of the id property and MUST be a URI conforming to RFC3986.
  // A conforming producer MUST NOT produce multiple service entries with
  // the same id. A conforming consumer MUST produce an error if it detects
  // multiple service entries with the same id.
  optional string id = 1;

  // Type is an example of registered types which can be found
  // here: https://www.w3.org/TR/did-spec-registries/#service-types
  optional string type = 2;

  // ServiceEndpoint is a network address, such as an HTTP URL, at which services
  // operate on behalf of a DID subject.
  repeated string service_endpoint = 3;
}

// VerificationMethod expresses verification methods, such as cryptographic
// public keys, which can be used to authenticate or authorize interactions
// with the DID subject or associated parties. For example,
// a cryptographic public key can be used as a verification method with
// respect to a digital signature; in such usage, it verifies that the
// signer could use the associated cryptographic private key.
//
// Specification Reference: https://www.w3.org/TR/did-core/#verification-methods
message VerificationMethod {
  // A unique id of the verification method.
  optional string id = 1;

  // references exactly one verification method type. In order to maximize global
  // interoperability, the verification method type SHOULD be registered in the
  // DID Specification Registries: https://www.w3.org/TR/did-spec-registries/
  optional string type = 2;

  // a value that conforms to the rules in DID Syntax: https://www.w3.org/TR/did-core/#did-syntax
  optional string controller = 3;

  // specification reference: https://www.w3.org/TR/did-core/#dfn-publickeyjwk
  optional Jwk public_key_jwk = 4;
}

