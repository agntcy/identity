syntax = "proto3";

package agntcy.identity.node.v1alpha1;

import "agntcy/identity/core/v1alpha1/id.proto";
import "agntcy/identity/core/v1alpha1/issuer.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/agntcy/identity/internal/pkg/generated/agntcy/identity/node/v1alpha1;identity_node_sdk_go";

// IdService is the service that provides ID operations.
service IdService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "IdService";
  };

  // Generate a Id
  rpc Generate(GenerateRequest) returns (GenerateResponse) {
    option (google.api.http) = {
            post: "/v1alpha1/id/generate"
            body: "*"
        };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GenerateId";
      summary: "Generate Id and its corresponding Id Document";
    };
  }

  // Resolve an Id
  rpc Resolve(ResolveRequest) returns (ResolveResponse) {
    option (google.api.http) = {
            post: "/v1alpha1/id/resolve"
            body: "*"
        };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ResolveId";
      summary: "Resolve Id to its corresponding Id Document";
    };
  }
}

// Generate an Id for an issuer
message GenerateRequest {
  // The issuer details
  agntcy.identity.core.v1alpha1.Issuer issuer = 1;
}

// GenerateResponse returns the Id Document
message GenerateResponse {
  // The Id Document corresponding to the generated Id
  agntcy.identity.core.v1alpha1.IdDocument id_document = 1;
}

// Resolve an Id to the Id Document
message ResolveRequest {
  // Id is the identifier.
  string id = 1;
}

// ResolveResponse returns the Id Document
message ResolveResponse {
  // The Id Document resolved from the Id
  agntcy.identity.core.v1alpha1.IdDocument id_document = 1;
}

