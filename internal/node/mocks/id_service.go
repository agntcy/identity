// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	types1 "github.com/agntcy/identity/internal/core/id/types"
	"github.com/agntcy/identity/internal/core/issuer/types"
	types0 "github.com/agntcy/identity/internal/core/vc/types"
	mock "github.com/stretchr/testify/mock"
)

// NewIdService creates a new instance of IdService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdService {
	mock := &IdService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IdService is an autogenerated mock type for the IdService type
type IdService struct {
	mock.Mock
}

type IdService_Expecter struct {
	mock *mock.Mock
}

func (_m *IdService) EXPECT() *IdService_Expecter {
	return &IdService_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type IdService
func (_mock *IdService) Generate(ctx context.Context, issuer *types.Issuer, proof *types0.Proof) (*types1.ResolverMetadata, error) {
	ret := _mock.Called(ctx, issuer, proof)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *types1.ResolverMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.Issuer, *types0.Proof) (*types1.ResolverMetadata, error)); ok {
		return returnFunc(ctx, issuer, proof)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.Issuer, *types0.Proof) *types1.ResolverMetadata); ok {
		r0 = returnFunc(ctx, issuer, proof)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types1.ResolverMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.Issuer, *types0.Proof) error); ok {
		r1 = returnFunc(ctx, issuer, proof)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IdService_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type IdService_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - issuer *types.Issuer
//   - proof *types0.Proof
func (_e *IdService_Expecter) Generate(ctx interface{}, issuer interface{}, proof interface{}) *IdService_Generate_Call {
	return &IdService_Generate_Call{Call: _e.mock.On("Generate", ctx, issuer, proof)}
}

func (_c *IdService_Generate_Call) Run(run func(ctx context.Context, issuer *types.Issuer, proof *types0.Proof)) *IdService_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.Issuer
		if args[1] != nil {
			arg1 = args[1].(*types.Issuer)
		}
		var arg2 *types0.Proof
		if args[2] != nil {
			arg2 = args[2].(*types0.Proof)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *IdService_Generate_Call) Return(resolverMetadata *types1.ResolverMetadata, err error) *IdService_Generate_Call {
	_c.Call.Return(resolverMetadata, err)
	return _c
}

func (_c *IdService_Generate_Call) RunAndReturn(run func(ctx context.Context, issuer *types.Issuer, proof *types0.Proof) (*types1.ResolverMetadata, error)) *IdService_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function for the type IdService
func (_mock *IdService) Resolve(ctx context.Context, id string) (*types1.ResolverMetadata, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *types1.ResolverMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*types1.ResolverMetadata, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *types1.ResolverMetadata); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types1.ResolverMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IdService_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type IdService_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *IdService_Expecter) Resolve(ctx interface{}, id interface{}) *IdService_Resolve_Call {
	return &IdService_Resolve_Call{Call: _e.mock.On("Resolve", ctx, id)}
}

func (_c *IdService_Resolve_Call) Run(run func(ctx context.Context, id string)) *IdService_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IdService_Resolve_Call) Return(resolverMetadata *types1.ResolverMetadata, err error) *IdService_Resolve_Call {
	_c.Call.Return(resolverMetadata, err)
	return _c
}

func (_c *IdService_Resolve_Call) RunAndReturn(run func(ctx context.Context, id string) (*types1.ResolverMetadata, error)) *IdService_Resolve_Call {
	_c.Call.Return(run)
	return _c
}
