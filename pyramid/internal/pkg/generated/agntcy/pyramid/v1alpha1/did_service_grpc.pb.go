// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: agntcy/pyramid/v1alpha1/did_service.proto

package pyramid_sdk_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DidService_GenerateDid_FullMethodName = "/agntcy.pyramid.v1alpha1.DidService/GenerateDid"
	DidService_ResolveDid_FullMethodName  = "/agntcy.pyramid.v1alpha1.DidService/ResolveDid"
	DidService_ListDids_FullMethodName    = "/agntcy.pyramid.v1alpha1.DidService/ListDids"
	DidService_PublishDid_FullMethodName  = "/agntcy.pyramid.v1alpha1.DidService/PublishDid"
)

// DidServiceClient is the client API for DidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DidService is the service that provides DID operations.
type DidServiceClient interface {
	// Generate a Did
	GenerateDid(ctx context.Context, in *GenerateDidRequest, opts ...grpc.CallOption) (*Did, error)
	// Resolve a Did
	ResolveDid(ctx context.Context, in *ResolveDidRequest, opts ...grpc.CallOption) (*DidDocument, error)
	// List Dids.
	ListDids(ctx context.Context, in *ListDidsRequest, opts ...grpc.CallOption) (*ListDidsResponse, error)
	// Publish a Did
	PublishDid(ctx context.Context, in *PublishDidRequest, opts ...grpc.CallOption) (*DidDocument, error)
}

type didServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDidServiceClient(cc grpc.ClientConnInterface) DidServiceClient {
	return &didServiceClient{cc}
}

func (c *didServiceClient) GenerateDid(ctx context.Context, in *GenerateDidRequest, opts ...grpc.CallOption) (*Did, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Did)
	err := c.cc.Invoke(ctx, DidService_GenerateDid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *didServiceClient) ResolveDid(ctx context.Context, in *ResolveDidRequest, opts ...grpc.CallOption) (*DidDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DidDocument)
	err := c.cc.Invoke(ctx, DidService_ResolveDid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *didServiceClient) ListDids(ctx context.Context, in *ListDidsRequest, opts ...grpc.CallOption) (*ListDidsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDidsResponse)
	err := c.cc.Invoke(ctx, DidService_ListDids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *didServiceClient) PublishDid(ctx context.Context, in *PublishDidRequest, opts ...grpc.CallOption) (*DidDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DidDocument)
	err := c.cc.Invoke(ctx, DidService_PublishDid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DidServiceServer is the server API for DidService service.
// All implementations should embed UnimplementedDidServiceServer
// for forward compatibility.
//
// DidService is the service that provides DID operations.
type DidServiceServer interface {
	// Generate a Did
	GenerateDid(context.Context, *GenerateDidRequest) (*Did, error)
	// Resolve a Did
	ResolveDid(context.Context, *ResolveDidRequest) (*DidDocument, error)
	// List Dids.
	ListDids(context.Context, *ListDidsRequest) (*ListDidsResponse, error)
	// Publish a Did
	PublishDid(context.Context, *PublishDidRequest) (*DidDocument, error)
}

// UnimplementedDidServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDidServiceServer struct{}

func (UnimplementedDidServiceServer) GenerateDid(context.Context, *GenerateDidRequest) (*Did, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDid not implemented")
}
func (UnimplementedDidServiceServer) ResolveDid(context.Context, *ResolveDidRequest) (*DidDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDid not implemented")
}
func (UnimplementedDidServiceServer) ListDids(context.Context, *ListDidsRequest) (*ListDidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDids not implemented")
}
func (UnimplementedDidServiceServer) PublishDid(context.Context, *PublishDidRequest) (*DidDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDid not implemented")
}
func (UnimplementedDidServiceServer) testEmbeddedByValue() {}

// UnsafeDidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DidServiceServer will
// result in compilation errors.
type UnsafeDidServiceServer interface {
	mustEmbedUnimplementedDidServiceServer()
}

func RegisterDidServiceServer(s grpc.ServiceRegistrar, srv DidServiceServer) {
	// If the following call pancis, it indicates UnimplementedDidServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DidService_ServiceDesc, srv)
}

func _DidService_GenerateDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DidServiceServer).GenerateDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DidService_GenerateDid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DidServiceServer).GenerateDid(ctx, req.(*GenerateDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DidService_ResolveDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DidServiceServer).ResolveDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DidService_ResolveDid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DidServiceServer).ResolveDid(ctx, req.(*ResolveDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DidService_ListDids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DidServiceServer).ListDids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DidService_ListDids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DidServiceServer).ListDids(ctx, req.(*ListDidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DidService_PublishDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DidServiceServer).PublishDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DidService_PublishDid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DidServiceServer).PublishDid(ctx, req.(*PublishDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DidService_ServiceDesc is the grpc.ServiceDesc for DidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agntcy.pyramid.v1alpha1.DidService",
	HandlerType: (*DidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateDid",
			Handler:    _DidService_GenerateDid_Handler,
		},
		{
			MethodName: "ResolveDid",
			Handler:    _DidService_ResolveDid_Handler,
		},
		{
			MethodName: "ListDids",
			Handler:    _DidService_ListDids_Handler,
		},
		{
			MethodName: "PublishDid",
			Handler:    _DidService_PublishDid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agntcy/pyramid/v1alpha1/did_service.proto",
}
