// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: agntcy/pyramid/v1alpha1/did.proto

package pyramid_sdk_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DidSubjectType defines the types of subjects that a Decentralized Identifier (DID) can represent.
// It categorizes the role or nature of the subject within a decentralized identity framework.
type DidSubjectType int32

const (
	// Unspecified Function Type.
	DidSubjectType_DID_SUBJECT_TYPE_UNSPECIFIED DidSubjectType = 0
	// The DID subject is an agent
	DidSubjectType_DID_SUBJECT_TYPE_AGENT DidSubjectType = 1
	// The DID subject is an agent locator
	DidSubjectType_DID_SUBJECT_TYPE_AGENT_LOCATOR DidSubjectType = 2
)

// Enum value maps for DidSubjectType.
var (
	DidSubjectType_name = map[int32]string{
		0: "DID_SUBJECT_TYPE_UNSPECIFIED",
		1: "DID_SUBJECT_TYPE_AGENT",
		2: "DID_SUBJECT_TYPE_AGENT_LOCATOR",
	}
	DidSubjectType_value = map[string]int32{
		"DID_SUBJECT_TYPE_UNSPECIFIED":   0,
		"DID_SUBJECT_TYPE_AGENT":         1,
		"DID_SUBJECT_TYPE_AGENT_LOCATOR": 2,
	}
)

func (x DidSubjectType) Enum() *DidSubjectType {
	p := new(DidSubjectType)
	*p = x
	return p
}

func (x DidSubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DidSubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_agntcy_pyramid_v1alpha1_did_proto_enumTypes[0].Descriptor()
}

func (DidSubjectType) Type() protoreflect.EnumType {
	return &file_agntcy_pyramid_v1alpha1_did_proto_enumTypes[0]
}

func (x DidSubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DidSubjectType.Descriptor instead.
func (DidSubjectType) EnumDescriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{0}
}

type Did struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Did) Reset() {
	*x = Did{}
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Did) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Did) ProtoMessage() {}

func (x *Did) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Did.ProtoReflect.Descriptor instead.
func (*Did) Descriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{0}
}

// A PyramID Decentralized Identifier Document represents a set of data describing the DID subject including mechanisms such as:
//   - cryptographic public keys - used to authenticate itself and prove
//     association with the DID
//   - services - means of communicating or interacting with the DID subject or
//     associated entities via one or more service endpoints.
//     Examples include discovery services, agent services,
//     social networking services, file storage services,
//     and verifiable credential repository services.
//
// A DID Document can be retrieved by resolving a DID URI.
type DidDocument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DID {ID}
	// A did could be represented as `did:agntcy:{ID}`
	// The metadata below is related as claims to the {ID}
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The node that was used to publish the document
	Node *string `protobuf:"bytes,2,opt,name=node,proto3,oneof" json:"node,omitempty"`
	// Controller defines an entity that is authorized to make changes to a DID document.
	// The process of authorizing a DID controller is defined by the DID method.
	// It can be a string or a list of strings.
	Controller []string `protobuf:"bytes,3,rep,name=controller,proto3" json:"controller,omitempty"`
	// VerificationMethod is a list of cryptographic public keys, which can be used to authenticate or authorize
	// interactions with the DID subject or associated parties.
	VerificationMethod []*VerificationMethod `protobuf:"bytes,4,rep,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	// Service expresses ways of communicating with the DID subject or associated entities.
	// A service can be any type of service the DID subject wants to advertise.
	// spec reference: https://www.w3.org/TR/did-core/#verification-methods
	Service []*Service `protobuf:"bytes,5,rep,name=service,proto3" json:"service,omitempty"`
	// AssertionMethod is used to specify how the DID subject is expected to express claims,
	// such as for the purposes of issuing a Verifiable Credential.
	AssertionMethod []string `protobuf:"bytes,6,rep,name=assertion_method,json=assertionMethod,proto3" json:"assertion_method,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DidDocument) Reset() {
	*x = DidDocument{}
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DidDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidDocument) ProtoMessage() {}

func (x *DidDocument) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidDocument.ProtoReflect.Descriptor instead.
func (*DidDocument) Descriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{1}
}

func (x *DidDocument) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DidDocument) GetNode() string {
	if x != nil && x.Node != nil {
		return *x.Node
	}
	return ""
}

func (x *DidDocument) GetController() []string {
	if x != nil {
		return x.Controller
	}
	return nil
}

func (x *DidDocument) GetVerificationMethod() []*VerificationMethod {
	if x != nil {
		return x.VerificationMethod
	}
	return nil
}

func (x *DidDocument) GetService() []*Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *DidDocument) GetAssertionMethod() []string {
	if x != nil {
		return x.AssertionMethod
	}
	return nil
}

// DidSubject represents a subject within a decentralized identity framework.
type DidSubject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A local unique id of the subject.
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Type specifies the type of the subject, as defined by the DidSubjectType enum.
	// This indicates the role or nature of the subject in the decentralized identity system,
	// such as whether it is an agent or an agent locator.
	Type          *DidSubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=agntcy.pyramid.v1alpha1.DidSubjectType,oneof" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DidSubject) Reset() {
	*x = DidSubject{}
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DidSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidSubject) ProtoMessage() {}

func (x *DidSubject) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidSubject.ProtoReflect.Descriptor instead.
func (*DidSubject) Descriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{2}
}

func (x *DidSubject) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DidSubject) GetType() DidSubjectType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DidSubjectType_DID_SUBJECT_TYPE_UNSPECIFIED
}

// JWK represents a JSON Web Key as per RFC7517 (https://tools.ietf.org/html/rfc7517)
// Note that this is a subset of the spec. There are a handful of properties that the
// spec allows for that are not represented here at the moment. This is because we
// only need a subset of the spec for our purposes.
type JWK struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ALG represents the algorithm intended for use with the key.
	Alg *string `protobuf:"bytes,1,opt,name=alg,proto3,oneof" json:"alg,omitempty"`
	// KTY represents the key type parameter.
	// It specifies the family of cryptographic algorithms used with the key,
	// such as "RSA" or "EC" for elliptic curve keys.
	Kty *string `protobuf:"bytes,2,opt,name=kty,proto3,oneof" json:"kty,omitempty"`
	// CRV represents the curve parameter for elliptic curve keys.
	// It specifies the cryptographic curve used with the key, such as "P-256" or "P-384".
	Crv *string `protobuf:"bytes,3,opt,name=crv,proto3,oneof" json:"crv,omitempty"`
	// D represents the private key parameter.
	// This field is used to store the private key material for asymmetric keys.
	D *string `protobuf:"bytes,4,opt,name=d,proto3,oneof" json:"d,omitempty"`
	// X represents the x-coordinate for elliptic curve keys.
	// This field is part of the public key material for elliptic curve cryptography (ECC).
	X *string `protobuf:"bytes,5,opt,name=x,proto3,oneof" json:"x,omitempty"`
	// Y represents the y-coordinate for elliptic curve keys.
	// This field is part of the public key material for elliptic curve cryptography (ECC)
	Y             *string `protobuf:"bytes,6,opt,name=y,proto3,oneof" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWK) Reset() {
	*x = JWK{}
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWK) ProtoMessage() {}

func (x *JWK) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWK.ProtoReflect.Descriptor instead.
func (*JWK) Descriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{3}
}

func (x *JWK) GetAlg() string {
	if x != nil && x.Alg != nil {
		return *x.Alg
	}
	return ""
}

func (x *JWK) GetKty() string {
	if x != nil && x.Kty != nil {
		return *x.Kty
	}
	return ""
}

func (x *JWK) GetCrv() string {
	if x != nil && x.Crv != nil {
		return *x.Crv
	}
	return ""
}

func (x *JWK) GetD() string {
	if x != nil && x.D != nil {
		return *x.D
	}
	return ""
}

func (x *JWK) GetX() string {
	if x != nil && x.X != nil {
		return *x.X
	}
	return ""
}

func (x *JWK) GetY() string {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return ""
}

// Service is used in DID documents to express ways of communicating with
// the DID subject or associated entities.
// A service can be any type of service the DID subject wants to advertise.
//
// Specification Reference: https://www.w3.org/TR/did-core/#services
type Service struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the value of the id property and MUST be a URI conforming to RFC3986.
	// A conforming producer MUST NOT produce multiple service entries with
	// the same id. A conforming consumer MUST produce an error if it detects
	// multiple service entries with the same id.
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Type is an example of registered types which can be found
	// here: https://www.w3.org/TR/did-spec-registries/#service-types
	Type *string `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// ServiceEndpoint is a network address, such as an HTTP URL, at which services
	// operate on behalf of a DID subject.
	ServiceEndpoint []string `protobuf:"bytes,3,rep,name=service_endpoint,json=serviceEndpoint,proto3" json:"service_endpoint,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{4}
}

func (x *Service) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Service) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Service) GetServiceEndpoint() []string {
	if x != nil {
		return x.ServiceEndpoint
	}
	return nil
}

// VerificationMethod expresses verification methods, such as cryptographic
// public keys, which can be used to authenticate or authorize interactions
// with the DID subject or associated parties. For example,
// a cryptographic public key can be used as a verification method with
// respect to a digital signature; in such usage, it verifies that the
// signer could use the associated cryptographic private key.
//
// Specification Reference: https://www.w3.org/TR/did-core/#verification-methods
type VerificationMethod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique id of the verification method.
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// references exactly one verification method type. In order to maximize global
	// interoperability, the verification method type SHOULD be registered in the
	// DID Specification Registries: https://www.w3.org/TR/did-spec-registries/
	Type *string `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// a value that conforms to the rules in DID Syntax: https://www.w3.org/TR/did-core/#did-syntax
	Controller *string `protobuf:"bytes,3,opt,name=controller,proto3,oneof" json:"controller,omitempty"`
	// specification reference: https://www.w3.org/TR/did-core/#dfn-publickeyjwk
	PublicKeyJwk  *JWK `protobuf:"bytes,4,opt,name=public_key_jwk,json=publicKeyJwk,proto3,oneof" json:"public_key_jwk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerificationMethod) Reset() {
	*x = VerificationMethod{}
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationMethod) ProtoMessage() {}

func (x *VerificationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationMethod.ProtoReflect.Descriptor instead.
func (*VerificationMethod) Descriptor() ([]byte, []int) {
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP(), []int{5}
}

func (x *VerificationMethod) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VerificationMethod) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *VerificationMethod) GetController() string {
	if x != nil && x.Controller != nil {
		return *x.Controller
	}
	return ""
}

func (x *VerificationMethod) GetPublicKeyJwk() *JWK {
	if x != nil {
		return x.PublicKeyJwk
	}
	return nil
}

var File_agntcy_pyramid_v1alpha1_did_proto protoreflect.FileDescriptor

var file_agntcy_pyramid_v1alpha1_did_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x70, 0x79, 0x72, 0x61, 0x6d, 0x69, 0x64,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2e, 0x70, 0x79, 0x72, 0x61,
	0x6d, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x05, 0x0a, 0x03,
	0x44, 0x69, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x0b, 0x44, 0x69, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x5c, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2e, 0x70, 0x79, 0x72, 0x61, 0x6d, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x12, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2e, 0x70, 0x79, 0x72, 0x61, 0x6d, 0x69,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x0a, 0x44, 0x69, 0x64, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79,
	0x2e, 0x70, 0x79, 0x72, 0x61, 0x6d, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x69, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x03,
	0x4a, 0x57, 0x4b, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6b, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x72, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x03, 0x63, 0x72, 0x76, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x01, 0x64, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x01, 0x78, 0x88, 0x01, 0x01, 0x12, 0x11,
	0x0a, 0x01, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x01, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6c, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x74,
	0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x72, 0x76, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x64, 0x42,
	0x04, 0x0a, 0x02, 0x5f, 0x78, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x79, 0x22, 0x72, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xe2, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6a, 0x77, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2e, 0x70, 0x79, 0x72, 0x61, 0x6d,
	0x69, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x57, 0x4b, 0x48,
	0x03, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4a, 0x77, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6a, 0x77, 0x6b, 0x2a, 0x72, 0x0a, 0x0e, 0x44, 0x69, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x59, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x70, 0x79,
	0x72, 0x61, 0x6d, 0x69, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x61, 0x67, 0x6e,
	0x74, 0x63, 0x79, 0x2f, 0x70, 0x79, 0x72, 0x61, 0x6d, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x70, 0x79, 0x72, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x64, 0x6b,
	0x5f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_agntcy_pyramid_v1alpha1_did_proto_rawDescOnce sync.Once
	file_agntcy_pyramid_v1alpha1_did_proto_rawDescData []byte
)

func file_agntcy_pyramid_v1alpha1_did_proto_rawDescGZIP() []byte {
	file_agntcy_pyramid_v1alpha1_did_proto_rawDescOnce.Do(func() {
		file_agntcy_pyramid_v1alpha1_did_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_agntcy_pyramid_v1alpha1_did_proto_rawDesc), len(file_agntcy_pyramid_v1alpha1_did_proto_rawDesc)))
	})
	return file_agntcy_pyramid_v1alpha1_did_proto_rawDescData
}

var file_agntcy_pyramid_v1alpha1_did_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_agntcy_pyramid_v1alpha1_did_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_agntcy_pyramid_v1alpha1_did_proto_goTypes = []any{
	(DidSubjectType)(0),        // 0: agntcy.pyramid.v1alpha1.DidSubjectType
	(*Did)(nil),                // 1: agntcy.pyramid.v1alpha1.Did
	(*DidDocument)(nil),        // 2: agntcy.pyramid.v1alpha1.DidDocument
	(*DidSubject)(nil),         // 3: agntcy.pyramid.v1alpha1.DidSubject
	(*JWK)(nil),                // 4: agntcy.pyramid.v1alpha1.JWK
	(*Service)(nil),            // 5: agntcy.pyramid.v1alpha1.Service
	(*VerificationMethod)(nil), // 6: agntcy.pyramid.v1alpha1.VerificationMethod
}
var file_agntcy_pyramid_v1alpha1_did_proto_depIdxs = []int32{
	6, // 0: agntcy.pyramid.v1alpha1.DidDocument.verification_method:type_name -> agntcy.pyramid.v1alpha1.VerificationMethod
	5, // 1: agntcy.pyramid.v1alpha1.DidDocument.service:type_name -> agntcy.pyramid.v1alpha1.Service
	0, // 2: agntcy.pyramid.v1alpha1.DidSubject.type:type_name -> agntcy.pyramid.v1alpha1.DidSubjectType
	4, // 3: agntcy.pyramid.v1alpha1.VerificationMethod.public_key_jwk:type_name -> agntcy.pyramid.v1alpha1.JWK
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_agntcy_pyramid_v1alpha1_did_proto_init() }
func file_agntcy_pyramid_v1alpha1_did_proto_init() {
	if File_agntcy_pyramid_v1alpha1_did_proto != nil {
		return
	}
	file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[1].OneofWrappers = []any{}
	file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[2].OneofWrappers = []any{}
	file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[3].OneofWrappers = []any{}
	file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[4].OneofWrappers = []any{}
	file_agntcy_pyramid_v1alpha1_did_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_agntcy_pyramid_v1alpha1_did_proto_rawDesc), len(file_agntcy_pyramid_v1alpha1_did_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agntcy_pyramid_v1alpha1_did_proto_goTypes,
		DependencyIndexes: file_agntcy_pyramid_v1alpha1_did_proto_depIdxs,
		EnumInfos:         file_agntcy_pyramid_v1alpha1_did_proto_enumTypes,
		MessageInfos:      file_agntcy_pyramid_v1alpha1_did_proto_msgTypes,
	}.Build()
	File_agntcy_pyramid_v1alpha1_did_proto = out.File
	file_agntcy_pyramid_v1alpha1_did_proto_goTypes = nil
	file_agntcy_pyramid_v1alpha1_did_proto_depIdxs = nil
}
