# Copyright 2025 AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
name: Release the Issuer CLI and the Node Docker Image

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "test-v[0-9]+.[0-9]+.[0-9]+" 

# Declare write permissions
permissions:
  contents: 'write'
  packages: 'write'
  attestations: 'read'

jobs:
  pre-release-test:
    name: Pre Release Test
    uses: ./.github/workflows/reusable-test.yml

  prepare-release:
    name: Prepare Release
    needs: [pre-release-test]
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      targets: ${{ steps.all-targets.outputs.targets }}
      is_test_release: ${{ steps.set-version.outputs.is_test_release }}  # Add this line to export the output
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f # v4.2.0
        with:
          fetch-depth: 0

      - name: Set version
        id: set-version
        run: |
          TAG=$(echo "$GITHUB_REF" | cut -d / -f 3)
          # Remove 'v' or 'test-v' prefix
          VERSION=${TAG#v}
          VERSION=${VERSION#test-v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "is_test_release=$(echo $TAG | grep -q '^test-' && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"
          # Debug output
          if echo $TAG | grep -q '^test-'; then
            echo "This is a test release tag: $TAG"
          else
            echo "This is a regular release tag: $TAG"
          fi
      - name: List all targets
        id: all-targets
        uses: docker/bake-action/subaction/list-targets@37816e747588cb137173af99ab33873600c46ea8 # v6.8.0
        with:
          workdir: ./deployments/docker
          target: default
        continue-on-error: true

  build-and-push-all-images:
    name: Build and Push Docker Images
    uses: ./.github/workflows/reusable-docker.yml
    needs: [prepare-release]
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.prepare-release.outputs.targets) }}
    with:
      bake-targets: ${{ matrix.target }}
      image-tag: ${{ needs.prepare-release.outputs.version }}
      image-repo: ghcr.io/${{ github.repository }}
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  build-and-release-issuer-client:
    name: Build and Release Issuer Cli
    uses: ./.github/workflows/reusable-go.yml
    needs: [prepare-release]
    with:
      workdir: ./cmd/issuer
      config: ../../.github/configs/issuer-cli-goreleaser.yml
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
      gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

  publish-helm-charts:
    uses: ./.github/workflows/reusable-helm.yml
    needs: [prepare-release]
    with:
      charts-dir: "charts"
      gh-pages-branch: "gh-pages"
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  build-python-sdk:
    name: Build Python SDK
    needs: [prepare-release]
    uses: ./.github/workflows/reusable-python.yml

  publish-python-sdk:
    name: Upload Identity Python Package to PyPI
    runs-on: ubuntu-latest
    needs:
      - build-python-sdk
    if: |
      always() &&
      (needs.build-python-sdk.result == 'skipped' || needs.build-python-sdk.result == 'success') &&
      needs.prepare-release.outputs.is_test_release != 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./dist

      - name: Show files
        run: ls -l ./dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: ./dist

  mock-publish-python-sdk:
    name: "[TEST] Verify Python Package"
    runs-on: ubuntu-latest
    needs:
      - prepare-release
      - build-python-sdk
    if: |
      always() &&
      (needs.build-python-sdk.result == 'skipped' || needs.build-python-sdk.result == 'success') &&
      needs.prepare-release.outputs.is_test_release == 'true'
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./dist-temp

      - name: Install verification tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel twine

      - name: Verify artifacts
        run: |
          mkdir -p ./dist
          
          echo "=== TEST MODE: Verifying distribution files ==="
          
          # Check each wheel file for corruption
          for wheel in $(find ./dist-temp -name "*.whl"); do
            echo "Checking wheel: $wheel"
            if python -c "import zipfile; result = zipfile.ZipFile('$wheel').testzip(); exit(0 if result is None else 1)" 2>/dev/null; then
              echo "✅ Valid wheel: $wheel"
              cp "$wheel" ./dist/
            else
              echo "❌ Corrupted wheel: $wheel"
              echo "Detailed error:"
              python -c "import zipfile; try: zipfile.ZipFile('$wheel'); except Exception as e: print(f'Error: {e}')"
            fi
          done
          
          # Copy any other distribution files
          for pkg in $(find ./dist-temp -name "*.tar.gz"); do
            echo "Copying source distribution: $pkg"
            cp "$pkg" ./dist/
          done
          
          echo "=== Files that would be published ==="
          ls -la ./dist/
          
          # Attempt twine check (but don't fail on error)
          python -m twine check ./dist/* || echo "⚠️ Twine check failed, would need fixing before real publish"
          
          echo "=== [TEST MODE] No actual publishing performed ==="